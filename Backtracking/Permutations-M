//https://leetcode.com/problems/permutations/
//https://leetcode.com/problems/permutations-ii/  //sililar problem
//permute 2 solution will work for permute 1 also ,no changes is required 

class Solution {
     List<List<Integer>> list;
    public List<List<Integer>> permute(int[] nums) {
       list = new ArrayList();
        traverse(nums, 0, new ArrayList());
        return list;
    }
    public void traverse(int[] nums,int index, List<Integer> cList){
        if(index == nums.length){
            list.add(new ArrayList(cList));
            return;
        }
        
        for(int i=index;i<nums.length;i++){
           swap(nums, i, index);
            cList.add(nums[index]);
            traverse(nums, index+1, cList);
            cList.remove(cList.size()-1);
           swap(nums,i,index);
        }
    }
    
    public void swap(int[] nums, int st, int end){
        int temp = nums[st];
        nums[st] = nums[end];
        nums[end] = temp;
    }
}


// another way with same time complexity 

   class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
         boolean[] visited = new boolean[nums.length];
         backtrack(res ,nums,new ArrayList(),visited);
         return res;
    }
    
     void backtrack(List<List<Integer>> res,int[] nums,List<Integer> curr, boolean[] visited){
                if(curr.size()==nums.length){
                 res.add(new ArrayList(curr));
                    return;
                }

                for(int i=0;i<nums.length;i++){
                    if(visited[i]==true)continue;
                    curr.add(nums[i]);
                    visited[i] = true;
                    backtrack(res,nums, curr,visited);
                    curr.remove(curr.size()-1);
                    visited[i] = false;
                } 
    }
}
