//https://leetcode.com/problems/subsets/description/
//https://leetcode.com/problems/subsets/solutions/27281/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partitioning/


class Solution {
    public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, 0);
    return list;
}

private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
}
}



//time pass solution 
//https://www.youtube.com/watch?v=i8Lay6smOWs&feature=youtu.be
//https://leetcode.com/problems/subsets/discuss/751005/Detailed-Explanation-with-Example-Dry-Run

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result=new ArrayList<>();
          result.add(new ArrayList<>());
        for(int i:nums){
          int size=result.size();
           for(int j=0;j<size;j++){
               ArrayList<Integer> subset=new ArrayList(result.get(j));
             subset.add(i);
             result.add(subset);
           }
        }
      return result;
    }
}
