//https://leetcode.com/problems/subsets/description/
//https://leetcode.com/problems/subsets/solutions/27281/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partitioning/


class Solution {
     public List<List<Integer>> ans;
    public List<List<Integer>> subsets(int[] nums) {
        ans=new ArrayList<>();
        rec(nums,new ArrayList<>(),0);
        return ans;
    }

   void  rec(int []nums,List<Integer> temp,int index){
        System.out.println(index);
        ans.add(new ArrayList<>(temp));
     for(int i=index;i<nums.length;i++){
         temp.add(nums[i]);
          rec(nums,temp,i+1);
         temp.remove(temp.size()-1); 
     }
   }
}


//time pass solution 
//https://www.youtube.com/watch?v=i8Lay6smOWs&feature=youtu.be
//https://leetcode.com/problems/subsets/discuss/751005/Detailed-Explanation-with-Example-Dry-Run

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result=new ArrayList<>();
          result.add(new ArrayList<>());
        for(int i:nums){
          int size=result.size();
           for(int j=0;j<size;j++){
               ArrayList<Integer> subset=new ArrayList(result.get(j));
             subset.add(i);
             result.add(subset);
           }
        }
      return result;
    }
}
