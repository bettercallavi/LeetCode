//https://leetcode.com/problems/permutations/
//https://leetcode.com/problems/permutations-ii/  //sililar problem
//permute 2 solution will work for permute 1 also ,no changes is required 
//https://www.youtube.com/watch?v=R3Sm9V2OSCo

// 2 way 1st better

class Solution {
    List<List<Integer>> ans;
    public List<List<Integer>> permute(int[] nums) {
        ans=new ArrayList<>();
        boolean visited[]=new boolean[nums.length];
        backtrack(nums,new ArrayList<Integer>(),visited);
        return ans;
    }
    void  backtrack(int[] nums, List<Integer> list,boolean[] visited){
      if(list.size()==nums.length){
       ans.add(new ArrayList<>(list));
       return ;
      } 
      for(int i=0;i<nums.length;i++){ 
          if(visited[i])
          continue ;
          list.add(nums[i]);
          visited[i]=true;
          backtrack(nums,list,visited);
          list.remove(list.size()-1);
          visited[i]=false;
      }
    }
}



//another way with same time complexity 
class Solution {
     List<List<Integer>> list;
    public List<List<Integer>> permute(int[] nums) {
       list = new ArrayList();
        traverse(nums, 0, new ArrayList());
        return list;
    }
    public void traverse(int[] nums,int index, List<Integer> cList){
        if(index == nums.length){
            list.add(new ArrayList(cList));
            return;
        }
        
        for(int i=index;i<nums.length;i++){
           swap(nums, i, index);
            cList.add(nums[index]);
            traverse(nums, index+1, cList);
            cList.remove(cList.size()-1);
           swap(nums,i,index);
        }
    }
    
    public void swap(int[] nums, int st, int end){
        int temp = nums[st];
        nums[st] = nums[end];
        nums[end] = temp;
    }
}
