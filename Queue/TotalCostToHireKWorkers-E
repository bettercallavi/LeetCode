//https://leetcode.com/problems/total-cost-to-hire-k-workers/

class Solution {
    public long totalCost(int[] costs, int k, int candidates) {
        
      PriorityQueue<Integer> p1=new PriorityQueue<>();
      PriorityQueue<Integer> p2=new PriorityQueue<>();
      int i=0;
      long ans=0;
      int j=costs.length-1;
      while(k-->0){
          while(p1.size()<candidates && i <= j){
              p1.add(costs[i++]);
          }
           while(p2.size()<candidates && i <= j){
              p2.add(costs[j--]);
          }

          int s1=p1.size()>0?p1.peek():Integer.MAX_VALUE;
          int s2=p2.size()>0?p2.peek():Integer.MAX_VALUE;
          if(s1<=s2){
            ans+=s1;
            p1.poll();
          }else{
             ans+=s2; 
             p2.poll();
          }
      }
      return ans;
    }
}
