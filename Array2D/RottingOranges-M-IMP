//https://leetcode.com/problems/rotting-oranges/submissions/

class Solution {
    public int orangesRotting(int[][] grid) {
        int count=0;
        Queue<Ele> queue=new LinkedList<>();
        int r=grid.length;
        int c=grid[0].length;
     for(int i=0;i<r;i++){
          for(int j=0;j<c;j++){
              if(grid[i][j]==2)queue.add(new Ele(i,j));
          }     
     } 
        queue.add(new Ele(-1,-1));
  while(!queue.isEmpty()){

                        Ele e=queue.poll();
                        if(e.x==-1 && e.y==-1){
                            count++;
                              if (!queue.isEmpty()) 
                                queue.add(new Ele(-1,-1));
                        continue;
                        }
                     if(isValid(e.x+1,e.y,r,c) && grid[e.x+1][e.y]==1){
                        grid[e.x+1][e.y]=2;
                         queue.add(new Ele(e.x+1,e.y));
                        } 
                     if(isValid(e.x-1,e.y,r,c) && grid[e.x-1][e.y]==1){
                         grid[e.x-1][e.y]=2;
                         queue.add(new Ele(e.x-1,e.y));
                        }
                     if(isValid(e.x,e.y+1,r,c) && grid[e.x][e.y+1]==1){
                         grid[e.x][e.y+1]=2;
                         queue.add(new Ele(e.x,e.y+1));
                        }
                      if(isValid(e.x,e.y-1,r,c) && grid[e.x][e.y-1]==1){
                         grid[e.x][e.y-1]=2;
                         queue.add(new Ele(e.x,e.y-1));
                        }      
      }
          if(isFreshExist(grid,r,c))   
          return -1;
          else
          return count-1;
 }
   
    boolean isValid(int x,int y,int r,int c){
    if(0<=x && x<r && 0<=y && y<c) 
    return true;
    else 
    return false;
  }  
    
    boolean isFreshExist(int arr[][],int r,int c) 
	{ 
		for (int i=0; i<r; i++) 
			for (int j=0; j<c; j++) 
				if (arr[i][j] == 1) 
					return true; 
		return false; 
	}  
  class Ele{
        int x;
        int y;
        Ele(int x,int y){
            this.x=x;
            this.y=y;
        }
    }
}
//solution 2 --- without queue we can solve but time complexity will be more 

class Solution {
  int r;
  int c;
    public int orangesRotting(int[][] grid) 
       {
        boolean changed = false;
        int no = 2; //starting with 2 is needed as rotten has value of 2 in first iteration then 3then 4 then next
        r=grid.length;
         c=grid[0].length;

        while (true) {
            for (int i = 0; i < r; i++) {
                for (int j = 0; j < c; j++) {

                    // Rot all other oranges present at
                    // (i+1, j), (i, j-1), (i, j+1), (i-1,
                    // j)
                    if (grid[i][j] == no) {
                        if (issafe(i + 1, j)
                                && grid[i + 1][j] == 1) {
                            grid[i + 1][j] = grid[i][j] + 1;
                            changed = true;
                        }
                        if (issafe(i, j + 1)
                                && grid[i][j + 1] == 1) {
                            grid[i][j + 1] = grid[i][j] + 1;
                            changed = true;
                        }
                        if (issafe(i - 1, j)
                                && grid[i - 1][j] == 1) {
                            grid[i - 1][j] = grid[i][j] + 1;
                            changed = true;
                        }
                        if (issafe(i, j - 1)
                                && grid[i][j - 1] == 1) {
                            grid[i][j - 1] = grid[i][j] + 1;
                            changed = true;
                        }
                    }
                }
            }

            // If no rotten orange found it means all
            // oranges rottened now
            if (!changed)
                break;

            changed = false;
            no++;
        }
// If any orange is found to be
// not rotten then ans is not possible
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] == 1)
                    return -1;
            }
        }

        // Because initial value for a rotten
        // orange was 2
        return no - 2;
    }
    

    boolean issafe(int i,int j){
         if(i<0 || i>=r || j<0 || j>=c)
         return false;
         return true;
        }

}
