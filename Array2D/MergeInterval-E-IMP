// https://leetcode.com/problems/merge-intervals/

class Solution {
    public int[][] merge(int[][] a) {
        List<int[]> list=new ArrayList<>();
        Arrays.sort(a,(p,q)->(p[0]!=q[0])?p[0]-q[0]:p[1]-q[1]);
        list.add(new int[]{a[0][0],a[0][1]});

         for(int i=1;i<a.length;i++){
          int prv[]=list.get(list.size()-1);
          if(a[i][0]>prv[1]){
            // System.out.println(Arrays.toString(a[i])); 
           list.add(a[i]);
          }
           else if(a[i][1]>prv[1]){ 
               list.remove(list.size()-1);
              // System.out.println(Arrays.toString(new int[]{prv[0],a[i][1]})); 
               list.add(new int[]{prv[0],a[i][1]});
           }
           }

        return list.toArray(new int[list.size()][]);
    }
}
//----------------------------same as above-------------------------------------------------
class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length == 0) {
            return intervals;
        }
	  Arrays.sort(intervals,(a,b)-> a[0]!=b[0]?a[0]-b[0]:a[1]-b[1]);
     List<int[]> list=new ArrayList<>();
      int curr[]=intervals[0];
      list.add(curr);
      for(int i=1;i<intervals.length;i++){
          if(intervals[i][0]<=curr[1]){
             curr[1]=Math.max(intervals[i][1],curr[1]);
          }else{
           list.add(intervals[i]);
            curr=intervals[i];
          }
      }
      
           return list.toArray(new int[list.size()][]);
    }
}
