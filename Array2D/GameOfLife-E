//https://leetcode.com/problems/game-of-life/description/?envType=study-plan-v2&envId=top-interview-150
//using o(m*n)extra space ,creating a seperate 2 D matrix and storing result ,after iteration replace old with new value 
//this solution is 100% fast 

class Solution {
    public void gameOfLife(int[][] board) {
        int tp[][]=new int[board.length][board[0].length];
        int[] dx = {0, 1, 1, 1, 0, -1, -1, -1};
        int[] dy = {1, 1, 0, -1, -1, -1, 0, 1};
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[i].length;j++)
            {
                int liv = 0;
                for (int k = 0; k < 8; k++) {
                    int x = i + dx[k];
                    int y = j + dy[k];
                    
                    if (x >= 0 && x < board.length && y >= 0 && y < board[0].length && board[x][y] == 1) {
                        liv++;
                    }
                }
                if(board[i][j]==1 && liv<2)
                {
                    tp[i][j]=0;
                }
                if(board[i][j]==1 && liv==2 || liv==3)
                {
                   tp[i][j]=1;
                }
                else if(board[i][j]==1 && liv>3)
                {
                    tp[i][j]=0;
                }
                else if(board[i][j]==0 && liv==3)
                {
                    tp[i][j]=1;
                }
            }
        }
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[i].length;j++)
            {
                board[i][j]=tp[i][j];
            }
        }
    }
}
//-------without extra space -------------------------

class Solution {
   public void gameOfLife(int[][] board) {
    if (board == null || board.length == 0) return;
    int m = board.length, n = board[0].length;

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            int lives = liveNeighbors(board, m, n, i, j);

            // In the beginning, every 2nd bit is 0;
            // So we only need to care about when will the 2nd bit become 1.
            if (board[i][j] == 1 && lives >= 2 && lives <= 3) {  
                board[i][j] = 3; // Make the 2nd bit 1: 01 ---> 11
            }
            if (board[i][j] == 0 && lives == 3) {
                board[i][j] = 2; // Make the 2nd bit 1: 00 ---> 10
            }
        }
    }

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            board[i][j] >>= 1;  // Get the 2nd state.
        }
    }
}

public int liveNeighbors(int[][] board, int m, int n, int i, int j) {
    int lives = 0;
    for (int x = Math.max(i - 1, 0); x <= Math.min(i + 1, m - 1); x++) {
        for (int y = Math.max(j - 1, 0); y <= Math.min(j + 1, n - 1); y++) {
            lives += board[x][y] & 1; //get the current state by doing AND with 1 ,checking all value around given i and j ,it is forming  another matrix 
        }
    }
    lives -= board[i][j] & 1; //no need to keep count of i,j ,so removing it 
    return lives;
}
}
