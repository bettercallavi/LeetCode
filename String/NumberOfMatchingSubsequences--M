//https://leetcode.com/problems/number-of-matching-subsequences/
//similer easy problem 
//https://leetcode.com/problems/is-subsequence/?envType=study-plan-v2&envId=leetcode-75
//similer medium problem 
//https://leetcode.com/problems/longest-common-subsequence/description/


class Solution {
    public int numMatchingSubseq(String s, String[] words) {
        Map<String,Integer> map = new HashMap<>();
        for(String str:words){
            map.put(str,map.getOrDefault(str,0)+1);
        }
        int ans = 0;
        char ch[] = s.toCharArray();
        for(String w:map.keySet()){
            char temp[] = w.toCharArray();
            int i = 0;
            int j = 0;
            while(i<ch.length && j<temp.length){
                if(ch[i]==temp[j]){
                    i++;
                    j++;
                }else{
                    i++;
                }
            }
            if(j==temp.length){
                ans+=map.get(w);
            }   
        }   
      return ans;  
    }
}
