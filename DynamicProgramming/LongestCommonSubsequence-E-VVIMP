//https://leetcode.com/problems/longest-common-subsequence/description/
//similer medium  problem 
//https://leetcode.com/problems/number-of-matching-subsequences/
//similer easy problem 
//https://leetcode.com/problems/is-subsequence/?envType=study-plan-v2&envId=leetcode-75

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {

       return recursion(text1,text2);     
    }
    int recursion(String text1,String text2){
        if ("".equals(text1)||("".equals(text2)))
        return 0;
        if(text1.charAt(0)==text2.charAt(0))
        return 1+recursion(text1.substring(1,text1.length()),text2.substring(1,text2.length()));
        else
       return  Math.max(recursion(text1.substring(1,text1.length()),text2.substring(0,text2.length())),
        recursion(text1.substring(0,text1.length()),text2.substring(1,text2.length())));
    }
}


//solution better https://leetcode.com/problems/longest-common-subsequence/solutions/351689/java-python-3-two-dp-codes-of-o-mn-o-min-m-n-spaces-w-picture-and-analysis/

class Solution {
    public int longestCommonSubsequence(String s1, String s2) {
        int m=s1.length();
        int n=s2.length();
        int a[][]=new int[m+1][n+1];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
               if(s1.charAt(i)==s2.charAt(j))
                a[i+1][j+1]=a[i][j]+1;      //why this why not a[i][j+1] ,check for s1=bb ,s2=b
                else
                 a[i+1][j+1]=Math.max(a[i+1][j],a[i][j+1]);
          }
        }
        return a[m][n];
    }
}


//same as above slight diff \
class Solution {
    public int longestCommonSubsequence(String s1, String s2) {
        int m=s1.length();
         int n=s2.length();
          int a[][]=new int[m+1][n+1];
        for(int i=1;i<=m;i++){
           for(int j=1;j<=n;j++){    
            if(s1.charAt(i-1)==s2.charAt(j-1))   
            a[i][j]=a[i-1][j-1]+1;
            else
               a[i][j]=Math.max(a[i-1][j],a[i][j-1]);
        }
        }
        System.out.println(Arrays.toString(a[0]));
        return a[m][n];
    }
}
