//https://leetcode.com/problems/minimum-path-sum/
// timeout 

public class Solution {
    public int minPathSum(int[][] grid) {
        return minPathSum(0, 0, grid);
    }

    private int minPathSum(int row, int col, int[][] grid) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[row].length) return Integer.MAX_VALUE;
        if (row == grid.length - 1 && col == grid[row].length - 1) return grid[row][col];

        int minSum = Integer.MAX_VALUE;
        int sum1 = minPathSum(row, col + 1, grid);
        int sum2 = minPathSum(row + 1, col, grid);

        if (sum1 != Integer.MAX_VALUE) {
            minSum = Math.min(minSum, sum1 + grid[row][col]);
        }

        if (sum2 != Integer.MAX_VALUE) {
            minSum = Math.min(minSum, sum2 + grid[row][col]);
        }

        return minSum;
    }
}


////////////////                   better approch easy approch  .......................................

class Solution {
    public int minPathSum(int[][] grid) {
        int rows = grid.length;
        int columns = grid[0].length;
        
        // First row sum
        for (int i = 1; i < columns; i++) {
            grid[0][i] += grid[0][i-1];
        }
        // First column sum 
        for (int j = 1; j < rows; j++) {
            grid[j][0] += grid[j-1][0];
        }
        
        for (int i = 1; i < rows; i++) {
            for (int j = 1; j < columns; j++) {
                grid[i][j] += Math.min(grid[i-1][j], grid[i][j-1]);
            }
        }
        return grid[rows-1][columns-1];
    }
}
