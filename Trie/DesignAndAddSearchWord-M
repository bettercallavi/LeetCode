//https://leetcode.com/problems/design-add-and-search-words-data-structure/description/?envType=study-plan-v2&envId=top-interview-150
//recursively call and increase index of word everytime 

class WordDictionary {
    private Node root;
 class Node {
        Map<Character, Node> child ;
        boolean end = false;
        Node() {
            child = new HashMap<>();
        }
    }
    public WordDictionary() {
        this.root = new Node();
    }
    public void addWord(String word) {
        Node node = root;
        for (int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);

            if (node.child.containsKey(ch)) {
                node = node.child.get(ch);
            } else {
                Node newNode = new Node();
                node.child.put(ch, newNode);
                node = newNode;
            }
        }
        node.end = true;
    }
    public boolean search(String word) {
        return search(word, 0, root);
    }
    private boolean search(String word, int i, Node node) {
        if (i == word.length())
            return node.end;

        char ch = word.charAt(i);

        if (ch == '.') {
            for (Character c : node.child.keySet()) {
                if (search(word, i + 1, node.child.get(c)))
                    return true;
            }
            return false;
        } else {
            if (node.child.containsKey(ch)) {
                return search(word, i + 1, node.child.get(ch));
            }
        }

        return false;
    }
}
