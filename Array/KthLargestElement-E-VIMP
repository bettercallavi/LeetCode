//https://leetcode.com/problems/kth-largest-element-in-an-array/description/
//approch 1 - create a max heap and remove k element 
// approch 2- sort then get kth 
// approch 3- solve is by quick select method https://leetcode.com/problems/kth-largest-element-in-an-array/description/
//n+n/2+n/4=2n--------->so time complexity is o(n)

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
        for(int i=0;i<nums.length;i++){
           pq.add(nums[i]);
           if(pq.size()>k)
           pq.poll();
        }
        return pq.peek();
    }
}

//using sort 

class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        int fromLast = nums.length - k;
        return nums[fromLast];

    }
}

//quick select best solution https://www.youtube.com/watch?v=XEmy13g1Qxc&t=654s

class Solution {
	int k=0;
public int findKthLargest(int[] nums, int k) {
	k=nums.length-k;
  return quickSelect(nums, 0, nums.length - 1, k);
}

int quickSelect(int[] nums, int low, int high, int k) {
  int pivot = nums[high];
  int p=low;
  for (int i = low; i < high; i++) {
    if (nums[i] < pivot) {
      swap(nums, p++, i);
    }}
  swap(nums, p, high);
  if (p == k) return nums[p];
  if (p > k) return quickSelect(nums, low, p - 1,k);
  return quickSelect(nums, p + 1, high,k);
}

private void swap(int[] nums, int x, int y) {
	int temp = nums[x];
	nums[x] = nums[y];
	nums[y] = temp;
}}
