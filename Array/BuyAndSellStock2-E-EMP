//https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/

class Solution {
    public int maxProfit(int[] prices) {
		// We need prices for 2 days at least to find the profit.
        if (prices == null || prices.length <= 1) {
            return 0;
        }

        int totalProfit = 0;
        for (int i = 1; i < prices.length; i++) {
            // Checking if we can profit with previous day's price.
            // If yes, then we buy on previous day and sell on current day.
            // Add all such profits to get the total profit.
            if (prices[i - 1] < prices[i]) {
                totalProfit += prices[i] - prices[i - 1];
            }
        }

        return totalProfit;
    }
}
//------------my solution ---------
class Solution {
    public int maxProfit(int[] p) {
       int ans=0;
       int low=p[0];
       int high=p[0];
        for(int i=1;i<p.length;i++){
           if(p[i]>high){
               high=p[i];
               continue;
           }
           else if(p[i]<high){
             ans+=high-low;
             low=p[i];
             high=p[i];
           }
        }
        if(high>low) ans+=high-low;
        return ans;
    }
}
