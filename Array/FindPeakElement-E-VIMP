//https://leetcode.com/problems/find-peak-element/description/
//https://www.youtube.com/watch?v=OINnBJTRrMU
 will try to explain it more simply. What we are essentially doing is going in the direction of the rising slope(by choosing the element which is greater than current). How does that guarantee the result? Think about it, there are 2 possibilities.a) rising slope has to keep rising till end of the array b) rising slope will encounter a lesser element and go down.
In both scenarios, we will have an answer. In a) the answer is the end element because we take the boundary as -INFINITY b) the answer is the largest element before the slope falls. Hope this makes things clearer.


class Solution {
    public int findPeakElement(int[] nums) {
        if(nums.length==1)
            return 0;
        int l=0;
        int h=nums.length-1;
        while(l<=h)
        {
            int mid=l+(h-l)/2;
            if(mid==0)
            {
                if(nums[mid]>nums[mid+1])
                    return mid;
                else
                    l=mid+1;
            }
            else if(mid==nums.length-1)
            {
                if(nums[mid]>nums[mid-1])
                    return mid;
                else 
                    h=mid-1;
            }
            else
            {
                if(nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1])
                    return mid;
                else if(nums[mid+1]>nums[mid])
                    l=mid+1;
                else
                    h=mid-1;
            }
        }
        return -1;

    }
}
