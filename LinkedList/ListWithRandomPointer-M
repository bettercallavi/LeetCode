//https://leetcode.com/problems/copy-list-with-random-pointer/
//https://www.youtube.com/watch?v=OvpKeraoxW0
//first may is using o(n) extra space using hashmap ,total 3 iteration is needed here  

class Solution {
    public Node copyRandomList(Node head) {
        Map<Node,Node> map=new HashMap<>();
      Node root=head;
      while(head!=null){
        Node node=new Node(head.val);
        map.put(head,node);
        head=head.next;
      }
      head=root;
       for(Map.Entry<Node,Node> entry : map.entrySet()){
         entry.getValue().random=map.get(entry.getKey().random);
         entry.getValue().next=map.get(entry.getKey().next);
       }
      return map.get(head);
    }}

//same as above ,insted od entry iteration we are doing here linkedList iteration 
class Solution {
    public Node copyRandomList(Node head) {
        Map<Node,Node> map=new HashMap<>();

    Node oldHead=head;
        while(oldHead!=null){
             Node newHead=new Node(oldHead.val);
             map.put(oldHead,newHead);
            oldHead=oldHead.next;
        }        
         Node tempOld=head;
         Node tempNew=map.get(head);
        while(tempNew!=null){
           tempNew.random=map.get(tempOld.random);
            tempNew.next=map.get(tempOld.next);  
           tempOld=tempOld.next;
           tempNew=tempNew.next;
        }

     return map.get(head);
    }
}
//######################################################################################################################################
/second way is using o(1) extra space 
   // create a new node after each node. which is our deep copy
 // list will become twice the size
 // Now we have all new nodes, list is twice the size now. 
 // Assign the random nodes properly. 
// now we have randoms for new list assigned well. 
 // create a new list and break it up
 // total 3 iteration needed to complete .
 
 class Solution {
    public Node copyRandomList(Node head) {  
    //1 step 
      if(head == null) return head;
      Node root=head;
        while(head!=null){
            Node node=new Node(head.val);
            Node next=head.next;
            head.next=node;
            node.next=next;
             head=next;
        }
        // 2nd step 
      head=root;
      while(head!=null){
         head.next.random=head.random!=null? head.random.next:null; 
         head=head.next.next;
      }
      //3rd step
      
        head=root;
        Node cur=head.next;
        Node copy=cur;
      while(head!=null){
        head.next=cur.next;
        head=head.next;
        cur.next=head!=null ? head.next:null;
        cur=cur.next;
      }
      return copy;
    }
}
