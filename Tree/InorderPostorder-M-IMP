//https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/?envType=study-plan-v2&envId=top-interview-150
//https://www.youtube.com/watch?v=s5XRtcud35E
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder){
        return build(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
    }
    private TreeNode build(int[] inorder, int is, int ie, int[] postorder, int ps, int pe) {
        if (is > ie || ps > pe) 
            return null;
        int rootVal = postorder[pe];
        TreeNode root = new TreeNode(rootVal);
        // Find the index of the root node in inorder traversal
        int rootIndex = 0;
        for (int i = is; i <= ie; i++) {
            if (inorder[i] == rootVal) {
                rootIndex = i;
                break;
            }
        }
        // Recursively build the left and right subtrees
        int leftSize = rootIndex - is;  //size of array in left of root 
        int rightSize = ie - rootIndex;  //size of array to right of array 
        root.left = build(inorder, is, rootIndex - 1, postorder, ps, ps + leftSize - 1); // as left then right then root in postorder 
        root.right = build(inorder, rootIndex + 1, ie, postorder, pe - rightSize, pe - 1);
        return root;
}}

