//https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/
//

//same as level order traversal ,but for zigzag added a flag and adding in begining if flag is false
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<>();
         if(root == null){
            return ans;
        }
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        boolean flag=true;
        while(!q.isEmpty()){
            List<Integer> list=new ArrayList<>();
            int size=q.size();
            while(size-->0){
                TreeNode node=q.poll();
                if(flag)
                list.add(node.val);
                else
                list.add(0,node.val);
                if(node.left!=null)q.add(node.left);
                if(node.right!=null)q.add(node.right);
            }
            ans.add(list);
            flag=!flag;
        }
        return ans;
    }
}


// other way ,interviewer might not want this 

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root==null){
            return list;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> l = new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode curr =  q.poll();
                l.add(curr.val);
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            list.add(l);
        }
        for(int i=0;i<list.size();i++){
            if(i%2 !=0){
                Collections.reverse(list.get(i));
            }
        }
        return list;
    }
}
