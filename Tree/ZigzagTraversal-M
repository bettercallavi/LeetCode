//https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/
//

class Solution {
  List<List<Integer>> list;
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        list=new ArrayList<>();
       traverse(root);
      return list;
    }
    void traverse(TreeNode node){
       Stack<TreeNode> current=new Stack<>();
       Stack<TreeNode> nextLevel=new Stack<>();
       current.add(node);
      boolean flag=false;
      
        while(!current.isEmpty()){
           int count=current.size();
           List tempList=new ArrayList();
          while(count-->0){
               TreeNode  temp=current.pop();
            if(temp!=null){
               tempList.add(temp.val);
              if(flag){
                 nextLevel.add(temp.right);
                 nextLevel.add(temp.left);
              }else{
                  nextLevel.add(temp.left);
                  nextLevel.add(temp.right);
                }
            }
          }
          if(tempList.size()>0)
          list.add(tempList);
          flag=flag? false:true;
           Stack<TreeNode> temp=current;
            current=nextLevel;
            nextLevel=temp;
        }

    }
}


// other way ,interviewer might not want this 

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root==null){
            return list;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> l = new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode curr =  q.poll();
                l.add(curr.val);
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            list.add(l);
        }
        for(int i=0;i<list.size();i++){
            if(i%2 !=0){
                Collections.reverse(list.get(i));
            }
        }
        return list;
    }
}
