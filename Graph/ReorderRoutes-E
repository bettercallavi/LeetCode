//https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/description/?envType=study-plan-v2&envId=leetcode-75

class Solution {
    public int minReorder(int n, int[][] c) {
    List<List<Integer>> adj=new ArrayList<>();

    for(int i=0;i<n;i++){
     adj.add(new ArrayList<>());
    }
     for(int i=0;i<n-1;i++){
     adj.get(c[i][0]).add(c[i][1]);    //creating adjeceny matrix 
     adj.get(c[i][1]).add(-c[i][0]);
    }
    Queue<Integer> q= new LinkedList<>();
    q.add(0);
    int count =0;
    boolean visited[]=new boolean[n];
    visited[0]=true;
    while(!q.isEmpty()){
       int x=q.poll();
       for(int e:adj.get(Math.abs(x))){
       if(!visited[Math.abs(e)]){
           visited[Math.abs(e)]=true;
           q.add(e);
           if(e>0)
           count++;
         }
       }
    }
    return count;
    }
}
